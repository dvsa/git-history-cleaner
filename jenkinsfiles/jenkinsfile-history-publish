//FIXED VARIABLES

String NODE = 'builder'
String PRIVATE_REPO_PATH = 'mot'
//DEFINITIONS
def check_out_repo(group, repo, gitbranch, creds){
    checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: gitbranch]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: repo]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: creds, url: 'git@gitlab.motdev.org.uk:' + group + '/' + repo +'.git']]]
}

node(NODE) {
  wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']) {
    wrap([$class: 'TimestamperBuildWrapper']) {
      stage 'Checkout GIT repos'
      sh 'set +x; echo -e "\033[34mCheckout GIT repos\033[0m"'
      env.WORKSPACE = pwd()
      deleteDir()
      check_out_repo('mot', PRIVATE_REPO_PATH, 'master', '313a82d3-f2e7-4787-837e-7517f3ce84eb')
      check_out_repo('mot', 'git-history-cleaner', GIT_HISTORY_CLEANER_BRANCH, '313a82d3-f2e7-4787-837e-7517f3ce84eb')
      stage 'Build JAVA app'
      dir('git-history-cleaner') {
        withEnv(['PATH=/usr/java/jdk1.8.0_60/bin/:$PATH']) {
          sh './gradlew jar'
        }
      }
      stage "Set remote to github"
      dir('mot'){
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'GITHUB_CREDENTIALS', usernameVariable: 'github_username', passwordVariable: 'github_password']]) {
          sh '''
          git remote add public-origin https://${github_username}:${github_password}@github.com/KainosSoftwareLtd/dvsa-mot.git
          git fetch public-origin
          git config --global user.name DVSA
          git config --global user.email dvsa@dvsa.gov.uk
          '''
        }
      }

      stage "Publish"
      dir('git-history-cleaner') {
        sh """
        java -jar build/libs/git-history-cleaner-1.0.jar publish ${PRIVATE_REPO_HASH} ${env.WORKSPACE}/${PRIVATE_REPO_PATH}
        """
      }
    }
  }
}
